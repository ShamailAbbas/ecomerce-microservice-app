events {}

http {
    upstream product_service {
        server host.docker.internal:6000; # Order Service on host machine
    }
    upstream order_service {
        server host.docker.internal:4000; # Order Service on host machine
    }

    upstream notification_service {
        server host.docker.internal:5000; # Notification Service on host machine
    }

    server {
        listen 80;

        # Route requests to the Order Service
        location /product {
            proxy_pass http://product_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /order {
            proxy_pass http://order_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Route requests to the Notification Service
        location /notification {
            proxy_pass http://notification_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            return 200 'API Gateway is healthy';
        }
    }
}